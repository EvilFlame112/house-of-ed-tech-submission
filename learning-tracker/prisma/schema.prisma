// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  courses       Course[]
  studySessions StudySession[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Application Models
model Course {
  id                   String   @id @default(cuid())
  userId               String   @map("user_id")
  title                String
  description          String?  @db.Text
  totalEstimatedHours  Float    @default(0) @map("total_estimated_hours")
  color                String?  @default("#10b981")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  modules Module[]

  @@index([userId])
  @@map("courses")
}

enum ModuleStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

model Module {
  id              String       @id @default(cuid())
  courseId        String       @map("course_id")
  title           String
  status          ModuleStatus @default(PLANNED)
  estimatedHours  Float        @map("estimated_hours")
  actualHours     Float?       @map("actual_hours")
  notes           String?      @db.Text
  priority        Priority     @default(MEDIUM)
  dueDate         DateTime?    @map("due_date")
  completedAt     DateTime?    @map("completed_at")
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")

  course        Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  flashcards    Flashcard[]
  studySessions StudySession[]

  @@index([courseId])
  @@index([status])
  @@map("modules")
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model Flashcard {
  id            String     @id @default(cuid())
  moduleId      String     @map("module_id")
  question      String     @db.Text
  answer        String     @db.Text
  difficulty    Difficulty @default(MEDIUM)
  reviewCount   Int        @default(0) @map("review_count")
  lastReviewed  DateTime?  @map("last_reviewed")
  isAIGenerated Boolean    @default(false) @map("is_ai_generated")
  createdAt     DateTime   @default(now()) @map("created_at")

  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@index([moduleId])
  @@map("flashcards")
}

model StudySession {
  id        String   @id @default(cuid())
  moduleId  String   @map("module_id")
  userId    String   @map("user_id")
  duration  Int      // in minutes
  notes     String?  @db.Text
  createdAt DateTime @default(now()) @map("created_at")

  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([moduleId])
  @@index([userId])
  @@map("study_sessions")
}
